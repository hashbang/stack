
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userdb-db-write
  labels:
    app: userdb
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: userdb-db-write
  template:
    metadata:
      labels:
        deployment: userdb-db-write
    spec:
      volumes:
      - name: userdb-data
        persistentVolumeClaim:
          claimName: userdb-data
      securityContext:
        fsGroup: 100
      containers:
      - name: postgres
        image: registry.localhost:5000/postgres
        ports:
        - name: tcp
          containerPort: 5432
        volumeMounts:
        - mountPath: /data
          name: userdb-data
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: userdb-db-write
              key: password

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: userdb-api
  labels:
    app: userdb
spec:
  replicas: 3
  selector:
    matchLabels:
      deployment: userdb-api
  template:
    metadata:
      labels:
        deployment: userdb-api
    spec:
      containers:
      - name: postgrest
        image: registry.localhost:5000/postgrest
        ports:
        - name: http
          containerPort: 3000
        env:
        - name: PGRST_SERVER_PORT
          value: '3000'
        - name: PGPORT
          value: '5432'
        - name: PGHOST
          value: userdb-db-write
        - name: PGDATABASE
          value: userdb
        - name: PGDATABASE
          value: userdb
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: userdb-db-write
              key: password
        - name: PGRST_DB_URL
          value: postgresql://$(PGDATABASE)?host=$(PGHOST)&user=$(PGUSER)

#---
#
#apiVersion: v1
#kind: Pod
#metadata:
#  name: userdb-init
#  labels:
#    app: userdb
#spec:
#  volumes:
#  - name: userdb-data
#    persistentVolumeClaim:
#      claimName: userdb-data
#  containers:
#  - name: userdb-init
#    image: debian:buster
#    volumeMounts:
#    - mountPath: /data
#      name: userdb-data
#    command: ["/bin/sh"]
#    args: ["-c","chown -R 100:100 /data; ls -lah /data;"]
#  restartPolicy: Never

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: userdb-data
  labels:
    app: userdb
spec:
  storageClassName: ""
  volumeName: userdb-data
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: userdb-data
  labels:
    app: userdb
spec:
  storageClassName: ""
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  claimRef:
    name: userdb-data
  hostPath:
    path: /volumes/userdb-data
